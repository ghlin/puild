#!/usr/bin/perl -w

use 5.010;
use strict;

sub chkext {
  my $ext = shift;
  return $ext eq '.cc'  || $ext eq '.cpp' || $ext eq '.C'
      || $ext eq '.cxx' || $ext eq '.c++' || $ext eq '.c';
}

our $c_lang   = 1;
our $cxx_lang = 2;

sub get_lang_by_ext {
  my $ext = shift;

  return $c_lang if $ext eq '.c';

  return $cxx_lang;
}

our $toolchains = {
  GCC  => [ 'gcc', 'g++' ],
  LLVM => [ 'clang', 'clang++' ],
  MS   => [ 'rm -rf', 'rm -rf' ],
};


sub get_compiler_by_lang {
  my $lang      = shift;
  my $toolchain = shift;

  $toolchain->[$lang - 1];
}

our $compiler_var = [ 'CC', 'CXX' ];

sub get_compiler_var_by_lang {
  my $lang = shift;
  '${' . $compiler_var->[$lang - 1] . '}';
}

sub update_linker_lang {
  my $lang = shift;
  my $prev = shift || $c_lang;

  return $cxx_lang if $prev eq $cxx_lang;
  return $c_lang   if $lang eq $c_lang;

  return $cxx_lang;
}

sub make_clean {
  my $target = shift;
  "\n\t\@[ -f $target ] && rm -vf $target || echo \"Skip: $target\"";
}

sub makefile {
  my $target_name = shift;
  my $dirs        = shift;
  my $flags       = shift;
  my $link_flags  = shift;

  $flags .= " '-I$_'" foreach (@$dirs);

  use File::Find;
  use File::Basename;

  my $lnklang = $c_lang;
  my $rules   = "";
  my $clean   = 'clean:' . make_clean $target_name;

  my @targets;
  my @suffix = qw(.C .cc .cpp .cxx .c++ .c);

  my @input_files;

  finddepth sub {
    push @input_files, $File::Find::name;
  }, $_ foreach (@$dirs);

  my %found;

  foreach my $file (@input_files) {
    my ($name, $dir, $ext) = fileparse($file, @suffix);

    next if ($found{$file});
    $found{$file} = 1;

    next unless (-f $file && chkext $ext);

    my $lang         = get_lang_by_ext $ext;
    my $compiler     = get_compiler_by_lang $lang, $toolchains->{LLVM};
    my $compiler_var = get_compiler_var_by_lang $lang;

    my @result       = split /:/, `$compiler -MM $file $flags`;

    die "Compiler raised an error!" unless $result[0];

    my $deps    =   $result[1];
    my $target  =   $dir . '_' . $result[0];
    $target     =~  s/\//_/g;
    $target     =~  s/\./_/g;
    $target     =~  s/_o$/.o/g;

    my $command = "\t\@echo \"$compiler $file\"\n"
                . "\t\@$compiler_var -c $file -o $target \${FLAGS} \${PREFLAGS}\n";

    $rules .= $target . " : \\\n";
    $rules .= $deps;
    $rules .= $command;
    $rules .= "\n";

    $lnklang  = update_linker_lang $lang, $lnklang;
    $clean   .= make_clean $target;
    push @targets, $target;
  }

  my $toolchain  = $toolchains->{LLVM};
  my $linker_cmd = get_compiler_by_lang $lnklang, $toolchain;

  my $head = "# Generated by puild\n\n"
           . "CC              :=$toolchain->[0]\n"
           . "CXX             :=$toolchain->[1]\n"
           . "PREFLAGS        :=$flags\n"
           . "PRELNKFLAGS     :=$link_flags\n"
           . "FLAGS           :=\n"
           . "LNKFLAGS        :=\n";

  my $all  = "all : @targets $target_name\n";

  my $link = "$target_name : @targets\n"
           . "\t\@echo Linking: $target_name\n"
           . "\t\@$linker_cmd @targets -o $target_name \${LNKFLAGS} \${PRELNKFLAGS}\n";

  join "\n", ($head, $all, $clean, $link, $rules);
}

my $usage = << 'USAGE'
puild -d <SRC-DIRS> -c <COMPILE-FLAGS> -l <LINK-FLAGS> -p <PRESETS> -o <TARGET>

  presets:

    PRESET      COMPILE-FLAGS                              LINK-FLAGS
    c++1y        -std=c++1y
    c++11        -std=c++11
    c++14        -std=c++14
    c11          -std=c11
    c99          -std=c99
    gnu++1y      -std=gnu++1y
    gnu++11      -std=gnu++11
    gnu++14      -std=gnu++14
    gnu11        -std=gnu11
    gnu99        -std=gnu99
    mt           -pthread                                   -lthread -pthread
    lua                                                     -llua
    debug        -g -DDEBUG -W -O -Wall -Wextra             -rdynamic

USAGE
;

sub make_preset {
  [ $_[0], $_[1] || "" ];
}

my $presets = {};

$presets->{'c++11'}   = make_preset "-std=c++11", "";
$presets->{'c++14'}   = make_preset "-std=c++14", "";
$presets->{'c++1y'}   = make_preset "-std=c++1y", "";
$presets->{c11}       = make_preset "-std=c11", "";
$presets->{c99}       = make_preset "-std=c99", "";
$presets->{'gnu++11'} = make_preset "-std=gnu++11", "";
$presets->{'gnu++14'} = make_preset "-std=gnu++14", "";
$presets->{'gnu++1y'} = make_preset "-std=gnu++1y", "";
$presets->{gnu11}     = make_preset "-std=gnu11", "";
$presets->{gnu99}     = make_preset "-std=gnu99", "";
$presets->{lua}       = make_preset "", "-llua";
$presets->{mt}        = make_preset "-pthread", "-lthread -pthread";
$presets->{debug}     = make_preset "-g -DDEBUG -O0", "-rdynamic";
$presets->{release}   = make_preset "-DNDEBUG -O3", "";
$presets->{brew}      = make_preset "-I/usr/local/include", "-L/usr/local/lib";
$presets->{sdl}       = make_preset "", "-lSDL2 -lSDL2_image -lSDL2_ttf";

my $state      = '-d';

my @dirs;
my $flags      = '';
my $link_flags = '';
my $target     = 'a.out';
my $marked     = {};

sub show_usage_and_exit {
  say $usage;
  exit shift;
}

show_usage_and_exit -1 unless scalar @ARGV;

foreach my $arg (@ARGV) {
  if ($arg eq '-h') {
    show_usage_and_exit 0;
  } elsif ($arg eq '-d' || $arg eq '-c' || $arg eq '-l' || $arg eq '-p' || $arg eq '-o') {
    $state = $arg;
  } else {
    if ($state eq '-d')    { push @dirs, $arg; }
    elsif ($state eq '-c') { $flags .= ' ' . $arg; }
    elsif ($state eq '-l')  { $link_flags .= ' ' . $arg; }
    elsif ($state eq '-o') { $target = $arg; }
    elsif ($state eq '-p') {
        next if $marked->{$arg};
        $marked->{$arg} = 1;

        my $p = $presets->{$arg};

        next unless $p;

        $flags         .= " " . $p->[0];
        $link_flags    .= " " . $p->[1];
    } else {
      die "WTF";
    }
  }
}

say makefile $target, \@dirs, $flags, $link_flags;

