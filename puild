#!/usr/bin/perl -w

use 5.010;
use strict;

sub chkext {
  my $ext = shift;
  return $ext eq '.cc'  || $ext eq '.cpp' || $ext eq '.C'
      || $ext eq '.cxx' || $ext eq '.c++' || $ext eq '.c';
}

sub compiler {
  my $ext = shift;

  return '${CC}' if $ext eq '.c';

  return '${CXX}'
}

sub linker {
  my $linker = shift;
  my $ext    = shift;

  return '${CXX}' if ($linker eq '${CXX}');
  return '${CC}'  if ($ext    eq '.c');

  return '${CXX}'
}

sub puild {
  my $prog      = shift;
  my @dirs      = split /:/, shift;
  my $flags     = shift;
  my $linkflags = shift;

  $flags  .= " '-I$_'" foreach (@dirs);

  use File::Find;
  use File::Basename;

  my $linker = "";
  my $rules  = "";
  my $clean = "clean :\n\t\@[ -f $prog ] && rm $prog || echo \"Skip: $prog\"\n";
  my @targets;

  my @suffix = qw(.C .cc .cpp .cxx .c++ .c);

  finddepth sub {
    my $file = $File::Find::name;
    my ($name, $dir, $ext) = fileparse($file, @suffix);

    return unless (-f $file && chkext $ext); # skip if not c++ chkext file

    my @result  = (split /:/, `g++ -MM $flags $file`); # use g++ -MM to detect deps
    my $deps    = $result[1];                          # output like -> target.o : <dep-list>
    my $target  = $File::Find::dir . '_' . $result[0]; # avoid duplicated target
                                                       # tr '/' -> '_'
    $target =~ s/\//_/g;

    my $compiler = compiler $ext;
    my $command  = "\t\@echo \"Compiling: $name$ext\"\n"
                 . "\t\@$compiler -c $file -o $target \${FLAGS}\n";

    $rules .= $target . " : \\\n"; # xxx_yyy_zzz_target.o : \
    $rules .= $deps;               #  xxx.yyy.h aaa.bbb.h ...
    $rules .= $command;            #  ${CXX} target.cc ...
    $rules .= "\n";                # newline.

    $clean .= "\t\@[ -f $target ] && rm $target || echo \"Skip: $target\"\n"; # clean $target

    push @targets, $target;

    $linker = linker $linker, $ext;
  }, $_ foreach (@dirs);

  my $head  = "# Generated by puild\n\n"
            . "CXX      := clang++\n"
            . "CC       := clang\n"
            . "FLAGS    := $flags\n"
            . "LNKFLAGS := $linkflags\n";
  my $all   = "all : @targets $prog\n";
  my $link  = "$prog : @targets\n"
            . "\t\@echo Linking: $prog\n"
            . "\t\@$linker @targets -o $prog \${LNKFLAGS}\n";

  join "\n", ($head, $all, $clean, $link, $rules);
}

my $prog      = shift @ARGV;
my $dir       = shift @ARGV;
my $flags     = shift @ARGV;
my $linkflags = shift @ARGV;

say puild $prog, $dir, $flags, $linkflags;

